import jsPDF from 'jspdf';
import 'jspdf-autotable';
import { formatCurrency } from './formatCurrency';

/**
 * Generate and download a PDF report of expenses
 * @param {Array} expenses - Array of expense objects
 * @param {string} groupName - Name of the group
 */
export const generateExpensePDF = (expenses, groupName) => {
  try {
    const doc = new jsPDF();
    
    // Add title
    doc.setFontSize(20);
    doc.setTextColor([108, 92, 231]); // Primary color - updated to match theme
    doc.text(`${groupName} - Expense Report`, 14, 22);
  
  // Add date
  doc.setFontSize(10);
  doc.setTextColor(100, 100, 100);
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 14, 30);
  
  // Prepare table data
  const tableColumn = ["Date", "Description", "Amount (₹)", "Paid By", "Split Type"];
  const tableRows = [];
  
  expenses.forEach(expense => {
    const expenseData = [
      new Date(expense.date).toLocaleDateString(),
      expense.description,
      formatCurrency(expense.amount).replace('₹', ''),
      expense.paidBy.name,
      expense.splitType
    ];
    tableRows.push(expenseData);
  });
  
  // Generate table
  doc.autoTable({
    head: [tableColumn],
    body: tableRows,
    startY: 40,
    theme: 'grid',
    styles: {
      fontSize: 10,
      cellPadding: 3,
      lineColor: [45, 52, 54]
    },
    headStyles: {
      fillColor: [108, 92, 231],
      textColor: [255, 255, 255],
      fontStyle: 'bold'
    },
    alternateRowStyles: {
      fillColor: [240, 240, 240]
    }
  });
  
  // Add total
  const total = expenses.reduce((sum, expense) => sum + expense.amount, 0);
  doc.setFontSize(12);
  doc.setTextColor(63, 81, 181);
  doc.text(`Total Expenses: ${formatCurrency(total)}`, 14, doc.autoTable.previous.finalY + 15);
  
  // Add footer
  const pageCount = doc.internal.getNumberOfPages();
  doc.setFontSize(10);
  doc.setTextColor([100, 100, 100]);
  for(let i = 1; i <= pageCount; i++) {
    doc.setPage(i);
    doc.text(`Page ${i} of ${pageCount}`, 14, doc.internal.pageSize.height - 10);
    doc.text('Generated by Splitwise Clone', doc.internal.pageSize.width - 14, doc.internal.pageSize.height - 10, { align: 'right' });
  }
  
  // Save the PDF
  doc.save(`${groupName.replace(/\s+/g, '_')}_expenses.pdf`);
    return true;
  } catch (error) {
    console.error("Error generating PDF:", error);
    alert("Failed to generate PDF. Please try again.");
    return false;
  }
};

/**
 * Generate and download a PDF report of balances
 * @param {Array} balances - Array of balance objects
 */
export const generateBalancePDF = (balances, userData) => {
  try {
    const doc = new jsPDF();
    
    // Add title
    doc.setFontSize(20);
    doc.setTextColor([108, 92, 231]); // Primary color - updated to match theme
    doc.text(`Balance Summary for ${userData.name}`, 14, 22);
  
  // Add date
  doc.setFontSize(10);
  doc.setTextColor(100, 100, 100);
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 14, 30);
  
  // Prepare table data
  const tableColumn = ["You owe", "Amount (₹)", "You are owed", "Amount (₹)"];
  const tableRows = [];
  
  // Process balances
  const youOwe = balances.filter(balance => balance.amount < 0);
  const youAreOwed = balances.filter(balance => balance.amount > 0);
  
  // Determine max length for table rows
  const maxLength = Math.max(youOwe.length, youAreOwed.length);
  
  for (let i = 0; i < maxLength; i++) {
    const row = [];
    
    // You owe data
    if (i < youOwe.length) {
      row.push(youOwe[i].user.name);
      row.push(formatCurrency(Math.abs(youOwe[i].amount)).replace('₹', ''));
    } else {
      row.push('', '');
    }
    
    // You are owed data
    if (i < youAreOwed.length) {
      row.push(youAreOwed[i].user.name);
      row.push(formatCurrency(youAreOwed[i].amount).replace('₹', ''));
    } else {
      row.push('', '');
    }
    
    tableRows.push(row);
  }
  
  // Generate table
  doc.autoTable({
    head: [tableColumn],
    body: tableRows,
    startY: 40,
    theme: 'grid',
    styles: {
      fontSize: 10,
      cellPadding: 3,
      lineColor: [220, 220, 220]
    },
    headStyles: {
      fillColor: [63, 81, 181],
      textColor: [255, 255, 255],
      fontStyle: 'bold'
    },
    alternateRowStyles: {
      fillColor: [240, 240, 240]
    }
  });
  
  // Add summary
  const totalOwed = youOwe.reduce((sum, balance) => sum + Math.abs(balance.amount), 0);
  const totalOwing = youAreOwed.reduce((sum, balance) => sum + balance.amount, 0);
  const netBalance = totalOwing - totalOwed;
  
  let yPos = doc.autoTable.previous.finalY + 15;
  
  doc.setFontSize(12);
  doc.setTextColor([244, 67, 54]); // Danger color
  doc.text(`Total you owe: ${formatCurrency(totalOwed)}`, 14, yPos);
  
  yPos += 8;
  doc.setTextColor([76, 175, 80]); // Success color
  doc.text(`Total you are owed: ${formatCurrency(totalOwing)}`, 14, yPos);
  
  yPos += 8;
  doc.setTextColor(netBalance >= 0 ? [76, 175, 80] : [244, 67, 54]);
  doc.text(`Net balance: ${formatCurrency(netBalance)}`, 14, yPos);
  
  // Add footer
  doc.setFontSize(10);
  doc.setTextColor(150, 150, 150);
  doc.text('Mini Splitwise - Expense Management App', 14, doc.internal.pageSize.height - 10);
  
  // Save PDF
  doc.save(`balance_summary_${userData.name.replace(/\s+/g, '_')}.pdf`);
    return true;
  } catch (error) {
    console.error("Error generating PDF:", error);
    alert("Failed to generate PDF. Please try again.");
    return false;
  }
};